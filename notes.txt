/*
STATUS

A Tour of GO
Pointers
https://tour.golang.org/moretypes/1


*/

Executable commands must always use "package main"

STARTING A PROJECT

- create the folder with something like:
"mkdir $GOPATH/src/github.com/user/hello"

- add a ***.go file to it

- install it with "go install"

- run it by typing the file name in the command line

SOME COMMANDS

"go run FILENAME"
- while in the dir of the file, this is used to run a file.

"go build"
- won't produce an ouptut. Instead saves the compiled package in the local build cache alongside the source code.
- It is used for confirming that it compiles/builds.

"go clean -i"
- cleans up the "go build" cached build.

"go install"
- returns an output file in the "bin" directory.
- automatically cleans the cache as well

*filename*
- typing in a file name will run it directly since our bin directory is in our PATH.

"go get"
- will fetch, build, and install a repository automatically

"go test"
- for running the test file

GO THINGS

"var i bool"
- declares a list of variables with type being last
- variable declaration at package or function level

"var i int = 1"
- variable with initializer
- type can be omitted since it takes the type of the initializer

":="
- var with implicit type
- only inside a function (since at package level every statement begins with a keyword)

type inference
i := 42           // int
f := 3.142        // float64
g := 0.867 + 0.5i // complex128

"T(v)"
type conversion expression i.
var i int = 42
var f float64 = float64(i)
var u uint = uint(f)

"const"
- same as var, but can't be changed with ":="

"func"
func add(x, y int) int {
	return x + y
}
- here, it takes two "arguments" of "int" type, and returns one result of "int" type

# TYPES

# bool

# string

# int  int8  int16  int32  int64
# uint uint8 uint16 uint32 uint64 uintptr

# byte // alias for uint8

# rune // alias for int32
#      // represents a Unicode code point

# float32 float64

# complex64 complex128

